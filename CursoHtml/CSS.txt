Estructura básica			

h1	{color:		black;}	
Selector	Propiedad	Valor	
Selector	----- declaración	-----	

!important	regla muy relevante		
!inherit	heredar		
/* esto es un comentario */	

agrupar selectores, es decir aplicar la misma regla a màs de un selector;
selector, selector, selector{...}

OJO: No se puede anidar comentarios		

.nombreDeLaClase
Selector del tipo etiqueta. Debe comenzar con un punto
div.nombreDeLaClase
Selector del tipo etiqueta. Busca una etiqueta DIV cuya clase sea NombreDeLaClase
[atributo]

[atributo=valor]
atributo que sea igual al valor

[atributo*=valor]
atributo que contiene al valor

[atributo~=valor]
atributo que tiene al valor como una palabra completa (separada por espacios)

[atributo^=valor]
atributo que comienza con el valor

[atributo$=valor]
atributo que finaliza con el valor


Selector de pseudoclase:
Selector:Pseudo-clase{propiedad: valor;}

:link
pseudoclase link - aplica a todos los enlaces que no fueron visitados por el usuario. Sólo es aplicable a hipervínculos.
:visited
pseudoclase visited - aplica a todos los enlaces que ya fueron visitados por el usuario. Sólo es aplicable a hipervínculos.

ejemplo: a:visited{...}
(esto es para todos los "a", que son enlaces, visitados)

Sólo se pueden aplicar estas propiedades a los hipervínculos visited:

background: gray;
color: white;
border-color: red; 
outline-color: blue;


:hover
Es como una propiedad "mouse over". Se puede aplicar a cualquier elemento html.

:active
Propiedad cuando un elemento HTML está activo: cuando está seleccionadocon el mouse, hasta que el usuario lo suelta. O cuando lo tienen con su dedo en el celular, hasta que lo suelta.

:focus
Dar un estilo a los objetos que obtienen el foco (por ejemplo, acción del tab)

:first-child
aplicar solamente al primer elemento de la etiqueta

:last-child
aplicar solamente al último  elemento de la etiqueta

:only-child
aplicar atributos a etiquetas que son hijos únicos y no tienen hermanos

:only-of-type
aplicar atributos a etiquetas que no son hijos únicos pero si tienen tipos únicos.

:nth-child(even)
aplica estilo sólo a los elementos pares
en lugar de even se puede usar (odd) y (Yn+X)
A partir de la posición X cuenta Y lugares

:nth-last-child
igual a nth-child pero cuenta los elemntos desde abajo

:empty
le aplica un estilo a los elementos o etiquetas que adentro están vacías, 
<etiqueta></etiqueta>

:not
todos los que no aplica algo. Por ejemplo que son de cierta etiqueta pero no tienen cierta clase.

form input:not([type="email"]){
Todos los campos de formulario que no sean email.

* ---- PSEUDOCLASES ---- *

:enable
aplica estilo a todos los elementos de formulario que están habilitados

:disable


:checked 

ejemplo:


form input[type="email"]:enabled{
background: green;
}

*---- pseudoelementos -----*
selector::pseudoelementos

::first-lines
selecciona la primera lìnea de un párrafo

::first-letter
selecciona la primera letra de un párrafo o div o donde lo pongamos
::before

::after



* ----------  RELEVANCIA ----------*

Orden de relevancias de HTML									

REGLA 1: Si un estilo está definido en la cabecera, y entra en conflicto con uno definido en el archivo externo, se aplica la definición más cercana en el código.									

REGLA 2; Los estilos en línea, al estar aplicados siempre en la etiqueta, siempre tienen predominancia									

REGLA 3: Si un estilo tiene el atributo IMPORTANT siempre se aplica ese estilo.									


Cálculo de especificidad de una regla de CSS									
Es un estilo en línea							c/u multiplica x	1000
Cantidad de IDs  (por ejemplo div#IdDelDiv		c/u multiplica x	100	
A una clase, pseudoclas o atributo. Ejemplo div.nombreDeLaClase																c/u multiplica x	10
Etiquetas y pseudoelementos - Ejemplo, p, o div, p:firstletter																c/u multiplica x	1

Sumar el total

Si el total empata, gana el orden en que son definidas: la última definida									
El navegador leé el contenido de arriba hacia abajo, y se aplica lo último definido											

* ------------- HERENCIA -----------------*

ancestro	ancestro	ancestro	padres	hijos	

HTML					
L	HEAD				
L	BODY				
L	P			
L	DIV			
L	UL		
L	LI	
L	LI	
L	LI	


Hay una lista de propiedades CSS que son heredables y otras que no lo son						


Cascada CSS3						
1) importancia de la regla						
2) especificidad de la regla						
3) cercanía a la regla						
Si dos o más declaraciones tienen la misma importancia, se aplica la de mayor especificidad, y si empatan, va por cercanía						



*--------- FUENTES -------------*

La propiedad font-size se hereda, entonces se puede asignar a body para no complicarse. 
El navegador busca las fuentes instaladas en el sistema operativo del usuario.

Hay ciertas etiquetas que no heredan naturalmente el tipo de letra. Por lo tanto hay que forzar la herencia:

select, textarea, input{
font-family: inherit;
}

Fuentes comunes a todos los sistemas operativos:

Arial
Comic Sans MS
Courier New
Georgia
Impact
Trebuchet MS
Times New Roman
Verdana

Otra opción es precargar fuentes externas. Para eso en lugar de un selector, en css hay que usar una regla:
@font

Luego se pueden traer las fuentes de la PC, son archivos
.otf
.ttf

O comprarlas de otros sitios:
www.fontsquirrel.com
www.efonts.co
www.myfonts.com

Para usarlas en la web, hay que tener licenciad de la fuente, y a la vez tiene que estar optimizada, convertida, a web. Los mismos sitios incluyen una herramienta de transofrmación en paquete web.

Formatos de fuentes:

EOT - Embedded Open Type - de compatibilidad original - sólo en Internet Explorer
WOFF - Web Open Font Format - es el estándar actual de la web
OTF - no es web, hay que convertirlos a web antes de usar
TTF - no es web, hay que convertirlos a web antes de usar
SVG - sólo soportado por apple

Por compatibilidad, siempre consultar en
caniuse.com

También se puede usar Google Fonts.
Simplemente se incluye una línea 


*-------- unidades de tamaño de fonts --------*

Pueden ser de tamaño aobsuluto o relativo.

Absoluto: unidades:

centímetros		cm
milímetros		mm
píxeles			px
pulgadas		in
picas			pc
puntos 			pt

Siempre tendrán el mismo tamaño al margen del dispositivo en el que se encuentren. Siempre van a ser del mismo tamaño.


Relativas: em

1em equivale al tamaño de la fuente definida en la etiqueta padre

1rem equivale al tamaño de la fuente definida en la etiqueta raíz del documento (<HTML>)

Sombras:
Se usa la propiedad text-shadow

text-shadow: 0px 2px 3px #555 donde cada paràmetro significa:
x-offset y-offset blur color
Se puede agregar más de una sombra, simplemente agregando comillas y repitiendo los parámetros.


IMagenes

Se usa "background"
Para abreviar propiedades de background se puede poner todo en este orden:

backgrounsd: b-image b-repeat b-position / b-size b-attachment b-clip b-color

*------------ MODELO DE LA CAJA  -------------------*


............................Top
.....*-----------------------------------------------*
.....|                    Margin                     | 
.....|   *---------------------------------------*   |
.....|   |                Border                 |   |
.....|   |   *-------------------------------*   |   |
.....|   |   |            Padding            |   |   |
.....|   |   |   *-----------------------*   |   |   |
.....|   |   |   |                       |   |   |   | 
Left |   |   |   |        CONTENT        |   |   |   | Right
.....|   |   |   |                       |   |   |   | 
.....|   |   |   *-----------------------*   |   |   |
.....|   |   |            Padding            |   |   |
.....|   |   *-------------------------------*   |   |
.....|   |                Border                 |   |
.....|   *---------------------------------------*   |
.....|                    Margin                     | 
.....*-----------------------------------------------*
..........................Bottom

El orden de las propiedades es; TOP RIGHT BOTTOM LEFT

Por ejemplo para la proiedad PADDING se puede poner:
padding: 0px 0px 0px 0px; 

donde cada número representa a top, right, bottom y left respectivamente.

La propiedad width define la anchura sólo del contenido sin tener en cuenta ni el padding ni el border ni margin.
Lo mismo pasa con heght. Solo el alto del contenido, y no de los conteedores (padding, border, y margin)

Box-sizing

Con esta propiedad se puede definir las dimensiones totales de una caja teniendo en cuenta el content+padding+border. Queda afuera únicamente el Margin.

Por default, box-sizing = content-box
Se puede poner en 

box-sizing: border-box; 

Esto quiere decir que se le suma el box-sizing es el nùmero que da el tota del tamaño hasta el borde.


Los párrafos por default se muestran en bloque pero se pueden mostra en lìnea (es decir en la misma linea de otro objeto, como si fuera un link)
Para eso se usa la propiedad:

display: inline;   ó     display: block


nav a{
display: inline-block;
width: 20%;
height: 30px;
background: yellow;
margin-right: -4px;
padding: 4px;
border: 2px solid red;
box-sizing: border-box;
}


float
Los elementos fotantes se respetan entre ellos. No se apilan entre ellos, pero sì se apilan sobre los elementos en bloque que no estén flotando.

--------------tablas------------------


Podemos hacer que los elementos html se comporten como tablas o elementos de tablas:

Las propiedades son:

display:
table-caption		título de una tabla
table-column		columna de tabla
table-row			fila de tablea
table-cell			celda de tabla

esto hace que una sección o párrafo se comporte como si fuera una tabla


visibility 		oculta un elemento, pero sigue estando ahí. El resto de los elementos se comportan como si el elemento sin visibilidad aùn estuviera ahì.

display: none	oculta un elemento y el resto se comporta como si no existiera.

Con 

position relative 

un elemento o caja comienza a moverse. Las propiedades para moverse son: top right left y bottom. Suma la cantidad de pixeles que digamos desde bottom, right, left o top


position absolute

Cuando un elemento tiene esta propiedad se saca completamente del flujo normal del documento. Hace que el resto de los elementos lo ignoren.

Una caja posicionada es aquella que tiene la propiedad position en 
- absolute (en función al tamaño de la página o body)
- relative (en función al contenedor)
- fixed

La ubicación de un elemento posicionado de forma absoluta dependerá de su ancestro posicionado más cercano. Si no hay ningún ancestro posicionado, se posiciona en función al body.


*---------------------------------------
Cajas y bordes

Cómo ponerle box-sizing y border-box a todos los elementos.
(Esto hace que cuando uno define el alto y ancho de un elemento se cuente el total, es decir que contemple el padding.

/* apply a natural box layout model to all elements, but allowing components to change */
html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}



*-------------------------------------
LIMPIAR LOS FLOATS

Normalmente se define una clase para todo el contenido que se llama "clearfix" en el HTML.

Luego en el CSS se pone:

.clearfix:before,
.clearfix.after{
    content:'';
    display: table;
}   
.clearfix.after{
    clear: both;
}

Esto mejora mucho la forma en que se manejan los floats para evitar que se desarme todo el código al usarlos.

También hay que agregar la clase clearfix a todos los elementos del HTML que se los haga flotar para que funcionen correctamente, de un modo más natural. 

*---------------------------------------
POSITION ABSOLUTE y RELATIVE

Para poder fijarle a un elemento position absolute, antes se debe fijar al elemento padre position relative explícitamente. 

Con esto se puede usar las propiedades botton, right, left, top

POr ejemplo;

bottom: -20px;



POSITION FIXED

hace que un elemento quede flotando de forma fija en la pantalla. Es como que se independiza del resto del código. Es lo que se utiliza para las barras de navegación de los sitios. 

OJO que hay que hacer que el contenido de abajo tenga algún padding.


*------------------------------------------------

DISPLAYS

---------------------------------------

Display: inline

LOS ELEMENTOS FLUYEN DENTRO DEL TEXTO (como si fueran del mismo párrafo)
Hay elementos como el H1, em, y otros que por default son inlien. Esto quiere decir que no rompen el flujo de texto.

El inline no aplica paddin arriba ni abajo. Sólo a derecha e izquierda.

Display: inline-block

Igual al anterior (no rompe el flujo) pero sí aplica padding arriba y abajo.
Se le puede ablicar todo: margin.

Display: block

UNO ABAJO DE OTRO.
Por default se aplica a todos los contenedores. El navegador ya lo aplica a los DIVs.
Por default toman todo el ancho, pero se les puede aplicar margin, paddings, y siempre el navegador los pone uno abajo de otro.

Display: none

Desaparece un elemento, aunque sigue existiendo en el HTML

Display: FLEX

Primero todos los elementos tienen que estar en un contenendor que se defina como DISPLAY: FLEX;

flex-direction: row (pone todos los elementos uno al lado del otro)
flex-direction: column

Sólo se puede usar uno al lado del otro o uno abajo del otro.

justify-content: flex-start (por default. es a la izquiera)

justify-content: flex-end (ubica los elementos a partir del final del contenedor)

justify-content: center (ubica los elementos en el centro)

justify-content: space-around (los separa de forma equidistante, como si fuera distibuir horizontal)

justify-content: space-between (los separa de forma equidistante, pero ubica el primer elemento bien a la izquierda y el último bien a la derecha y a partir de ahí distibuye todos los elementos)



flex-direction: wrap (hace quye midan correctamente)

----------------
Display TABLE
----------------

Al contenedor principal hay que ponerle

display: table

Y a los hijos se les puede poner

display: table-cell;

Esto convierte al contenedor en una celda de table.
Aquí dentro por ejemplo se puede hacer alineación vertical de texto. 
Por ejemplo usando un

vertical-align: middle;

-------------------------------
BACKGROUND usando IMAGENES
-------------------------------

background-image: url(../img/imagen.png), otra imagen;
background-repeat: no-repeat, imagen2;
background-size: 80px, imagen2;
background-position: right bottom, imagen2;
background-position: center center, imagen2;
background-position: 30px 55px, imagen2;

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
DISEÑO RESPONSIVO CON MEDIA QUERY
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

Es importante en el HTML anteponer el el HEAD una etqueta:
	
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">

El user-scalable lo que va a hacer es que el usuario no pueda hacer zoom in con los gestos del móvil.



@media only screen and (max-width: 599px){
	aquí dentro se ponen los selectores responsivos
}

Esto quiere decir que aplica sólo a pantallas y hasta 599 pixeles.

Si queremos que las propiedades apliquen de un tamaño de pantalla a otro, se usa esta instrucción:

@media only screen and (min-width: 600px) and (max-width: 800px){
	aquí dentro se ponen los selectores responsivos
}

Se desarrolla como Mobile First o como Desktop First.

Cuando se hace Desktop First quiere decir que se ponen todo el diseño para sitio de escritorio, y luego se ponene media queries para cuando el navegador se ejecuta en pantallas más pequeñas. Esto se hace poniendo el max-width:800px. Es decir, que en cualquier ancho menor a este, aplicarán los media queries específicos.

Cuando se hace Mobile First, quiere decir que se diseña para que todo funcione bien en un móvil, pero se ponen en media queries las características específicas para cuando el sitio se ve en un dispositivo más grande. Se hace poniendo el min-width:800px; 


IMAGENES


También podemos decir qué imagenes mostrar de acuerdo a la defincióń o al tamaño de la pantalla o del navegador.

Esto se hace directamente sobre el HTML

<picture>
	<source media="(max-width: 480px)" srcset="img/imagen_telefono.jpg">

	<img class="imagen" src="img/aqui va la imagen default"
</picture>